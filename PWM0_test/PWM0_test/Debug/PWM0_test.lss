
PWM0_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000087a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  0000087a  0000090e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080008c  0080008c  0000093a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000093a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000096c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015a4  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000902  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000beb  00000000  00000000  0000296e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  0000355c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000709  00000000  00000000  00003784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b7b  00000000  00000000  00003e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004a08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e7       	ldi	r30, 0x7A	; 122
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 38       	cpi	r26, 0x8C	; 140
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e8       	ldi	r26, 0x8C	; 140
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 38       	cpi	r26, 0x8D	; 141
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a3 02 	call	0x546	; 0x546 <main>
  8a:	0c 94 3b 04 	jmp	0x876	; 0x876 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_voidSetPinDirection>:
#include "DIO_Register.h"

// START PIN APIS
void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
	if((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= 7) && (copy_u8PinDirection <= 1))
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_voidSetPinDirection+0x6>
  96:	7e c0       	rjmp	.+252    	; 0x194 <DIO_voidSetPinDirection+0x102>
  98:	68 30       	cpi	r22, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_voidSetPinDirection+0xc>
  9c:	7b c0       	rjmp	.+246    	; 0x194 <DIO_voidSetPinDirection+0x102>
  9e:	42 30       	cpi	r20, 0x02	; 2
  a0:	08 f0       	brcs	.+2      	; 0xa4 <DIO_voidSetPinDirection+0x12>
  a2:	78 c0       	rjmp	.+240    	; 0x194 <DIO_voidSetPinDirection+0x102>
	{
		switch(copy_u8PortId)
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	19 f1       	breq	.+70     	; 0xee <DIO_voidSetPinDirection+0x5c>
  a8:	30 f0       	brcs	.+12     	; 0xb6 <DIO_voidSetPinDirection+0x24>
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	e1 f1       	breq	.+120    	; 0x126 <DIO_voidSetPinDirection+0x94>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	09 f4       	brne	.+2      	; 0xb4 <DIO_voidSetPinDirection+0x22>
  b2:	55 c0       	rjmp	.+170    	; 0x15e <DIO_voidSetPinDirection+0xcc>
  b4:	08 95       	ret
		{
			case DIO_PORTA:
			switch(copy_u8PinDirection)
  b6:	44 23       	and	r20, r20
  b8:	19 f0       	breq	.+6      	; 0xc0 <DIO_voidSetPinDirection+0x2e>
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	69 f0       	breq	.+26     	; 0xd8 <DIO_voidSetPinDirection+0x46>
  be:	08 95       	ret
			{
				case 0:
				CLR_BIT(DDRA_REG, copy_u8PinId);
  c0:	2a b3       	in	r18, 0x1a	; 26
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_voidSetPinDirection+0x3a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_voidSetPinDirection+0x36>
  d0:	80 95       	com	r24
  d2:	82 23       	and	r24, r18
  d4:	8a bb       	out	0x1a, r24	; 26
				break;
  d6:	08 95       	ret
				case 1:
				SET_BIT(DDRA_REG, copy_u8PinId);
  d8:	2a b3       	in	r18, 0x1a	; 26
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_voidSetPinDirection+0x52>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_voidSetPinDirection+0x4e>
  e8:	82 2b       	or	r24, r18
  ea:	8a bb       	out	0x1a, r24	; 26
				break;
  ec:	08 95       	ret
			}
			break;
			case DIO_PORTB:
			switch(copy_u8PinDirection)
  ee:	44 23       	and	r20, r20
  f0:	19 f0       	breq	.+6      	; 0xf8 <DIO_voidSetPinDirection+0x66>
  f2:	41 30       	cpi	r20, 0x01	; 1
  f4:	69 f0       	breq	.+26     	; 0x110 <DIO_voidSetPinDirection+0x7e>
  f6:	08 95       	ret
			{
				case DIO_PIN_INPUT:
				CLR_BIT(DDRB_REG, copy_u8PinId);
  f8:	27 b3       	in	r18, 0x17	; 23
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_voidSetPinDirection+0x72>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_voidSetPinDirection+0x6e>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	87 bb       	out	0x17, r24	; 23
				break;
 10e:	08 95       	ret
				case DIO_PIN_OUTPUT:
				SET_BIT(DDRB_REG, copy_u8PinId);
 110:	27 b3       	in	r18, 0x17	; 23
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_voidSetPinDirection+0x8a>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_voidSetPinDirection+0x86>
 120:	82 2b       	or	r24, r18
 122:	87 bb       	out	0x17, r24	; 23
				break;
 124:	08 95       	ret
			}
			break;
			case DIO_PORTC:
			switch(copy_u8PinDirection)
 126:	44 23       	and	r20, r20
 128:	19 f0       	breq	.+6      	; 0x130 <DIO_voidSetPinDirection+0x9e>
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	69 f0       	breq	.+26     	; 0x148 <DIO_voidSetPinDirection+0xb6>
 12e:	08 95       	ret
			{
				case DIO_PIN_INPUT:
				CLR_BIT(DDRC_REG, copy_u8PinId);
 130:	24 b3       	in	r18, 0x14	; 20
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_voidSetPinDirection+0xaa>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_voidSetPinDirection+0xa6>
 140:	80 95       	com	r24
 142:	82 23       	and	r24, r18
 144:	84 bb       	out	0x14, r24	; 20
				break;
 146:	08 95       	ret
				case DIO_PIN_OUTPUT:
				SET_BIT(DDRC_REG, copy_u8PinId);
 148:	24 b3       	in	r18, 0x14	; 20
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_voidSetPinDirection+0xc2>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_voidSetPinDirection+0xbe>
 158:	82 2b       	or	r24, r18
 15a:	84 bb       	out	0x14, r24	; 20
				break;
 15c:	08 95       	ret
			}
			break;
			case DIO_PORTD:
			switch(copy_u8PinDirection)
 15e:	44 23       	and	r20, r20
 160:	19 f0       	breq	.+6      	; 0x168 <DIO_voidSetPinDirection+0xd6>
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	69 f0       	breq	.+26     	; 0x180 <DIO_voidSetPinDirection+0xee>
 166:	08 95       	ret
			{
				case DIO_PIN_INPUT:
				CLR_BIT(DDRD_REG, copy_u8PinId);
 168:	21 b3       	in	r18, 0x11	; 17
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_voidSetPinDirection+0xe2>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_voidSetPinDirection+0xde>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	81 bb       	out	0x11, r24	; 17
				break;
 17e:	08 95       	ret
				case DIO_PIN_OUTPUT:
				SET_BIT(DDRD_REG, copy_u8PinId);
 180:	21 b3       	in	r18, 0x11	; 17
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_voidSetPinDirection+0xfa>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_voidSetPinDirection+0xf6>
 190:	82 2b       	or	r24, r18
 192:	81 bb       	out	0x11, r24	; 17
 194:	08 95       	ret

00000196 <DIO_voidSetPinValue>:
	

}
void DIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
	if ((copy_u8PortId <= DIO_PORTD) && (copy_u8PinId <= 7) && (copy_u8PinValue <= 1))
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	08 f0       	brcs	.+2      	; 0x19c <DIO_voidSetPinValue+0x6>
 19a:	7e c0       	rjmp	.+252    	; 0x298 <DIO_voidSetPinValue+0x102>
 19c:	68 30       	cpi	r22, 0x08	; 8
 19e:	08 f0       	brcs	.+2      	; 0x1a2 <DIO_voidSetPinValue+0xc>
 1a0:	7b c0       	rjmp	.+246    	; 0x298 <DIO_voidSetPinValue+0x102>
 1a2:	42 30       	cpi	r20, 0x02	; 2
 1a4:	08 f0       	brcs	.+2      	; 0x1a8 <DIO_voidSetPinValue+0x12>
 1a6:	78 c0       	rjmp	.+240    	; 0x298 <DIO_voidSetPinValue+0x102>
	{
		switch(copy_u8PortId)
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	19 f1       	breq	.+70     	; 0x1f2 <DIO_voidSetPinValue+0x5c>
 1ac:	30 f0       	brcs	.+12     	; 0x1ba <DIO_voidSetPinValue+0x24>
 1ae:	82 30       	cpi	r24, 0x02	; 2
 1b0:	e1 f1       	breq	.+120    	; 0x22a <DIO_voidSetPinValue+0x94>
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <DIO_voidSetPinValue+0x22>
 1b6:	55 c0       	rjmp	.+170    	; 0x262 <DIO_voidSetPinValue+0xcc>
 1b8:	08 95       	ret
		{
			case DIO_PORTA:
			switch(copy_u8PinValue)
 1ba:	44 23       	and	r20, r20
 1bc:	19 f0       	breq	.+6      	; 0x1c4 <DIO_voidSetPinValue+0x2e>
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	69 f0       	breq	.+26     	; 0x1dc <DIO_voidSetPinValue+0x46>
 1c2:	08 95       	ret
			{
				case DIO_PIN_LOW:
				CLR_BIT(PORTA_REG, copy_u8PinId);
 1c4:	2b b3       	in	r18, 0x1b	; 27
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_voidSetPinValue+0x3a>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_voidSetPinValue+0x36>
 1d4:	80 95       	com	r24
 1d6:	82 23       	and	r24, r18
 1d8:	8b bb       	out	0x1b, r24	; 27
				break;
 1da:	08 95       	ret
				case DIO_PIN_HIGH:
				SET_BIT(PORTA_REG, copy_u8PinId);
 1dc:	2b b3       	in	r18, 0x1b	; 27
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_voidSetPinValue+0x52>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_voidSetPinValue+0x4e>
 1ec:	82 2b       	or	r24, r18
 1ee:	8b bb       	out	0x1b, r24	; 27
				break;
 1f0:	08 95       	ret
			}
			break;
			case DIO_PORTB:
			switch(copy_u8PinValue)
 1f2:	44 23       	and	r20, r20
 1f4:	19 f0       	breq	.+6      	; 0x1fc <DIO_voidSetPinValue+0x66>
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	69 f0       	breq	.+26     	; 0x214 <DIO_voidSetPinValue+0x7e>
 1fa:	08 95       	ret
			{
				case DIO_PIN_LOW:
				CLR_BIT(PORTB_REG, copy_u8PinId);
 1fc:	28 b3       	in	r18, 0x18	; 24
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_voidSetPinValue+0x72>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_voidSetPinValue+0x6e>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	88 bb       	out	0x18, r24	; 24
				break;
 212:	08 95       	ret
				case DIO_PIN_HIGH:
				SET_BIT(PORTB_REG, copy_u8PinId);
 214:	28 b3       	in	r18, 0x18	; 24
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_voidSetPinValue+0x8a>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_voidSetPinValue+0x86>
 224:	82 2b       	or	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
				break;
 228:	08 95       	ret
			}
			break;
			case DIO_PORTC:
			switch(copy_u8PinValue)
 22a:	44 23       	and	r20, r20
 22c:	19 f0       	breq	.+6      	; 0x234 <DIO_voidSetPinValue+0x9e>
 22e:	41 30       	cpi	r20, 0x01	; 1
 230:	69 f0       	breq	.+26     	; 0x24c <DIO_voidSetPinValue+0xb6>
 232:	08 95       	ret
			{
				case DIO_PIN_LOW:
				CLR_BIT(PORTC_REG, copy_u8PinId);
 234:	25 b3       	in	r18, 0x15	; 21
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_voidSetPinValue+0xaa>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	6a 95       	dec	r22
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_voidSetPinValue+0xa6>
 244:	80 95       	com	r24
 246:	82 23       	and	r24, r18
 248:	85 bb       	out	0x15, r24	; 21
				break;
 24a:	08 95       	ret
				case DIO_PIN_HIGH:
				SET_BIT(PORTC_REG, copy_u8PinId);
 24c:	25 b3       	in	r18, 0x15	; 21
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_voidSetPinValue+0xc2>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_voidSetPinValue+0xbe>
 25c:	82 2b       	or	r24, r18
 25e:	85 bb       	out	0x15, r24	; 21
				break;
 260:	08 95       	ret
			}
			break;
			case DIO_PORTD:
			switch(copy_u8PinValue)
 262:	44 23       	and	r20, r20
 264:	19 f0       	breq	.+6      	; 0x26c <DIO_voidSetPinValue+0xd6>
 266:	41 30       	cpi	r20, 0x01	; 1
 268:	69 f0       	breq	.+26     	; 0x284 <DIO_voidSetPinValue+0xee>
 26a:	08 95       	ret
			{
				case DIO_PIN_LOW:
				CLR_BIT(PORTD_REG, copy_u8PinId);
 26c:	22 b3       	in	r18, 0x12	; 18
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_voidSetPinValue+0xe2>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_voidSetPinValue+0xde>
 27c:	80 95       	com	r24
 27e:	82 23       	and	r24, r18
 280:	82 bb       	out	0x12, r24	; 18
				break;
 282:	08 95       	ret
				case DIO_PIN_HIGH:
				SET_BIT(PORTD_REG, copy_u8PinId);
 284:	22 b3       	in	r18, 0x12	; 18
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_voidSetPinValue+0xfa>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_voidSetPinValue+0xf6>
 294:	82 2b       	or	r24, r18
 296:	82 bb       	out	0x12, r24	; 18
 298:	08 95       	ret

0000029a <PRV_voidWriteHalfPort>:
	DIO_voidSetPinValue(LCD_E_PORT, LCD_E_PIN, DIO_PIN_LOW);
}


static void	PRV_voidWriteHalfPort(u8 copy_u8Value)
{
 29a:	cf 93       	push	r28
 29c:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(LCD_D4_PORT, LCD_D4_PIN, GET_BIT(copy_u8Value, 0));
 29e:	48 2f       	mov	r20, r24
 2a0:	41 70       	andi	r20, 0x01	; 1
 2a2:	64 e0       	ldi	r22, 0x04	; 4
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D5_PORT, LCD_D5_PIN, GET_BIT(copy_u8Value, 1));
 2aa:	c1 fb       	bst	r28, 1
 2ac:	44 27       	eor	r20, r20
 2ae:	40 f9       	bld	r20, 0
 2b0:	65 e0       	ldi	r22, 0x05	; 5
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D6_PORT, LCD_D6_PIN, GET_BIT(copy_u8Value, 2));
 2b8:	c2 fb       	bst	r28, 2
 2ba:	44 27       	eor	r20, r20
 2bc:	40 f9       	bld	r20, 0
 2be:	66 e0       	ldi	r22, 0x06	; 6
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_D7_PORT, LCD_D7_PIN, GET_BIT(copy_u8Value, 3));
 2c6:	c3 fb       	bst	r28, 3
 2c8:	44 27       	eor	r20, r20
 2ca:	40 f9       	bld	r20, 0
 2cc:	67 e0       	ldi	r22, 0x07	; 7
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
}
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <PRV_voidEnableTriggerWrite>:
}

static void	PRV_voidEnableTriggerWrite(void)
{

	DIO_voidSetPinValue(LCD_E_PORT, LCD_E_PIN, DIO_PIN_HIGH);
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	62 e0       	ldi	r22, 0x02	; 2
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e2:	8f e9       	ldi	r24, 0x9F	; 159
 2e4:	9f e0       	ldi	r25, 0x0F	; 15
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <PRV_voidEnableTriggerWrite+0xe>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <PRV_voidEnableTriggerWrite+0x14>
 2ec:	00 00       	nop
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_E_PORT, LCD_E_PIN, DIO_PIN_LOW);
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	62 e0       	ldi	r22, 0x02	; 2
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
 2f8:	08 95       	ret

000002fa <LCD_voidSendCommand>:
	LCD_voidSendCommand(0b00000110);
}


void LCD_voidSendCommand(u8 copy_u8cmnd)
{
 2fa:	cf 93       	push	r28
 2fc:	c8 2f       	mov	r28, r24

	DIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_LOW);
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
	PRV_voidEnableTriggerWrite();
	
#elif LCD_MODE == LCD_4_BIT_MODE
    

	PRV_voidWriteHalfPort(copy_u8cmnd >> 4);
 308:	8c 2f       	mov	r24, r28
 30a:	82 95       	swap	r24
 30c:	8f 70       	andi	r24, 0x0F	; 15
 30e:	0e 94 4d 01 	call	0x29a	; 0x29a <PRV_voidWriteHalfPort>

	PRV_voidEnableTriggerWrite();
 312:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <PRV_voidEnableTriggerWrite>
	

	PRV_voidWriteHalfPort(copy_u8cmnd);
 316:	8c 2f       	mov	r24, r28
 318:	0e 94 4d 01 	call	0x29a	; 0x29a <PRV_voidWriteHalfPort>

	PRV_voidEnableTriggerWrite();
 31c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <PRV_voidEnableTriggerWrite>
	
#endif
}
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <LCD_voidInit>:
#include "LCD_Private.h"


void LCD_voidInit(void)
{
	DIO_voidSetPinDirection(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_OUTPUT);
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E_PORT,  LCD_E_PIN,  DIO_PIN_OUTPUT);
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	62 e0       	ldi	r22, 0x02	; 2
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
 338:	2f e7       	ldi	r18, 0x7F	; 127
 33a:	85 eb       	ldi	r24, 0xB5	; 181
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	80 40       	sbci	r24, 0x00	; 0
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <LCD_voidInit+0x1a>
 346:	00 c0       	rjmp	.+0      	; 0x348 <LCD_voidInit+0x24>
 348:	00 00       	nop
	LCD_voidSendCommand(0b00111000);
	_delay_us(45);
	
#elif LCD_MODE == LCD_4_BIT_MODE	
    
    DIO_voidSetPinDirection(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_OUTPUT);
 34a:	41 e0       	ldi	r20, 0x01	; 1
 34c:	64 e0       	ldi	r22, 0x04	; 4
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_OUTPUT);
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	65 e0       	ldi	r22, 0x05	; 5
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_OUTPUT);
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	66 e0       	ldi	r22, 0x06	; 6
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_OUTPUT);
 368:	41 e0       	ldi	r20, 0x01	; 1
 36a:	67 e0       	ldi	r22, 0x07	; 7
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	

	DIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_LOW);
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
	PRV_voidWriteHalfPort(0b0010);
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	0e 94 4d 01 	call	0x29a	; 0x29a <PRV_voidWriteHalfPort>

	PRV_voidEnableTriggerWrite();
 382:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <PRV_voidEnableTriggerWrite>

	LCD_voidSendCommand(0b00101000);
 386:	88 e2       	ldi	r24, 0x28	; 40
 388:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38c:	20 ef       	ldi	r18, 0xF0	; 240
 38e:	2a 95       	dec	r18
 390:	f1 f7       	brne	.-4      	; 0x38e <LCD_voidInit+0x6a>
	_delay_us(45);
	
#endif


	LCD_voidSendCommand(0b00001111);
 392:	8f e0       	ldi	r24, 0x0F	; 15
 394:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_voidSendCommand>
 398:	80 ef       	ldi	r24, 0xF0	; 240
 39a:	8a 95       	dec	r24
 39c:	f1 f7       	brne	.-4      	; 0x39a <LCD_voidInit+0x76>
	_delay_us(45);
	

	LCD_voidSendCommand(0b00000001);
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_voidSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a4:	8f e3       	ldi	r24, 0x3F	; 63
 3a6:	9f e1       	ldi	r25, 0x1F	; 31
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <LCD_voidInit+0x84>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <LCD_voidInit+0x8a>
 3ae:	00 00       	nop
	_delay_ms(2);
	

	LCD_voidSendCommand(0b00000110);
 3b0:	86 e0       	ldi	r24, 0x06	; 6
 3b2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_voidSendCommand>
 3b6:	08 95       	ret

000003b8 <LCD_voidDisplayChar>:
#endif
}


void LCD_voidDisplayChar(u8 copy_u8Data)
{
 3b8:	cf 93       	push	r28
 3ba:	c8 2f       	mov	r28, r24

	DIO_voidSetPinValue(LCD_RS_PORT, LCD_RS_PIN, DIO_PIN_HIGH);
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_voidSetPinValue>
    PRV_voidEnableTriggerWrite();

#elif LCD_MODE == LCD_4_BIT_MODE


    PRV_voidWriteHalfPort(copy_u8Data >> 4);
 3c6:	8c 2f       	mov	r24, r28
 3c8:	82 95       	swap	r24
 3ca:	8f 70       	andi	r24, 0x0F	; 15
 3cc:	0e 94 4d 01 	call	0x29a	; 0x29a <PRV_voidWriteHalfPort>

    PRV_voidEnableTriggerWrite();
 3d0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <PRV_voidEnableTriggerWrite>
    

    PRV_voidWriteHalfPort(copy_u8Data);
 3d4:	8c 2f       	mov	r24, r28
 3d6:	0e 94 4d 01 	call	0x29a	; 0x29a <PRV_voidWriteHalfPort>

    PRV_voidEnableTriggerWrite();
 3da:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <PRV_voidEnableTriggerWrite>

#endif
}
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <LCD_voidDisplayString>:

void LCD_voidDisplayString(u8* copy_pu8String)
{
 3e2:	0f 93       	push	r16
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
	if(copy_pu8String != NULL){
 3e8:	00 97       	sbiw	r24, 0x00	; 0
 3ea:	29 f4       	brne	.+10     	; 0x3f6 <LCD_voidDisplayString+0x14>
 3ec:	0c c0       	rjmp	.+24     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		u8 local_u8Iter = 0;
		while(copy_pu8String[local_u8Iter] != '\0') {
			LCD_voidDisplayChar(copy_pu8String[local_u8Iter]);
 3ee:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidDisplayChar>
			local_u8Iter++;
 3f2:	cf 5f       	subi	r28, 0xFF	; 255
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <LCD_voidDisplayString+0x18>
 3f6:	8c 01       	movw	r16, r24
 3f8:	c0 e0       	ldi	r28, 0x00	; 0

void LCD_voidDisplayString(u8* copy_pu8String)
{
	if(copy_pu8String != NULL){
		u8 local_u8Iter = 0;
		while(copy_pu8String[local_u8Iter] != '\0') {
 3fa:	f8 01       	movw	r30, r16
 3fc:	ec 0f       	add	r30, r28
 3fe:	f1 1d       	adc	r31, r1
 400:	80 81       	ld	r24, Z
 402:	81 11       	cpse	r24, r1
 404:	f4 cf       	rjmp	.-24     	; 0x3ee <LCD_voidDisplayString+0xc>
	}
	else
	{
		// RETURN ERROR STATE
	}
}
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	08 95       	ret

0000040e <LCD_voidDisplayNumber>:

void LCD_voidDisplayNumber(u32 copy_u32Number)
{
 40e:	cf 92       	push	r12
 410:	df 92       	push	r13
 412:	ef 92       	push	r14
 414:	ff 92       	push	r15
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	8b 01       	movw	r16, r22
 41c:	9c 01       	movw	r18, r24
	if (copy_u32Number == 0)
 41e:	67 2b       	or	r22, r23
 420:	68 2b       	or	r22, r24
 422:	69 2b       	or	r22, r25
 424:	49 f5       	brne	.+82     	; 0x478 <LCD_voidDisplayNumber+0x6a>
	{
		LCD_voidDisplayChar('0');
 426:	80 e3       	ldi	r24, 0x30	; 48
 428:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidDisplayChar>
 42c:	45 c0       	rjmp	.+138    	; 0x4b8 <LCD_voidDisplayNumber+0xaa>
	else
	{
		u32 local_u32ReversedNumber = 1;    
		    while(copy_u32Number != 0)
		    {
			    local_u32ReversedNumber = (local_u32ReversedNumber * 10) + (copy_u32Number % 10);
 42e:	dc 01       	movw	r26, r24
 430:	cb 01       	movw	r24, r22
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	aa 1f       	adc	r26, r26
 438:	bb 1f       	adc	r27, r27
 43a:	6c 01       	movw	r12, r24
 43c:	7d 01       	movw	r14, r26
 43e:	cc 0c       	add	r12, r12
 440:	dd 1c       	adc	r13, r13
 442:	ee 1c       	adc	r14, r14
 444:	ff 1c       	adc	r15, r15
 446:	cc 0c       	add	r12, r12
 448:	dd 1c       	adc	r13, r13
 44a:	ee 1c       	adc	r14, r14
 44c:	ff 1c       	adc	r15, r15
 44e:	c8 0e       	add	r12, r24
 450:	d9 1e       	adc	r13, r25
 452:	ea 1e       	adc	r14, r26
 454:	fb 1e       	adc	r15, r27
 456:	c9 01       	movw	r24, r18
 458:	b8 01       	movw	r22, r16
 45a:	2a e0       	ldi	r18, 0x0A	; 10
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	50 e0       	ldi	r21, 0x00	; 0
 462:	0e 94 05 04 	call	0x80a	; 0x80a <__udivmodsi4>
 466:	6c 0d       	add	r22, r12
 468:	7d 1d       	adc	r23, r13
 46a:	8e 1d       	adc	r24, r14
 46c:	9f 1d       	adc	r25, r15
			    copy_u32Number /= 10; 
 46e:	02 2f       	mov	r16, r18
 470:	13 2f       	mov	r17, r19
 472:	24 2f       	mov	r18, r20
 474:	35 2f       	mov	r19, r21
 476:	04 c0       	rjmp	.+8      	; 0x480 <LCD_voidDisplayNumber+0x72>
 478:	61 e0       	ldi	r22, 0x01	; 1
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	90 e0       	ldi	r25, 0x00	; 0
		LCD_voidDisplayChar('0');
	} 
	else
	{
		u32 local_u32ReversedNumber = 1;    
		    while(copy_u32Number != 0)
 480:	01 15       	cp	r16, r1
 482:	11 05       	cpc	r17, r1
 484:	21 05       	cpc	r18, r1
 486:	31 05       	cpc	r19, r1
 488:	91 f6       	brne	.-92     	; 0x42e <LCD_voidDisplayNumber+0x20>
			    copy_u32Number /= 10; 
		    }
			
			do 
			{
				LCD_voidDisplayChar((local_u32ReversedNumber % 10) + '0');
 48a:	2a e0       	ldi	r18, 0x0A	; 10
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	0e 94 05 04 	call	0x80a	; 0x80a <__udivmodsi4>
 496:	e2 2e       	mov	r14, r18
 498:	f3 2e       	mov	r15, r19
 49a:	04 2f       	mov	r16, r20
 49c:	15 2f       	mov	r17, r21
 49e:	80 e3       	ldi	r24, 0x30	; 48
 4a0:	86 0f       	add	r24, r22
 4a2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidDisplayChar>
				local_u32ReversedNumber /= 10;
 4a6:	6e 2d       	mov	r22, r14
 4a8:	7f 2d       	mov	r23, r15
 4aa:	80 2f       	mov	r24, r16
 4ac:	91 2f       	mov	r25, r17
			} while (local_u32ReversedNumber != 1);
 4ae:	61 30       	cpi	r22, 0x01	; 1
 4b0:	71 05       	cpc	r23, r1
 4b2:	81 05       	cpc	r24, r1
 4b4:	91 05       	cpc	r25, r1
 4b6:	49 f7       	brne	.-46     	; 0x48a <LCD_voidDisplayNumber+0x7c>
	}
}
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	ff 90       	pop	r15
 4be:	ef 90       	pop	r14
 4c0:	df 90       	pop	r13
 4c2:	cf 90       	pop	r12
 4c4:	08 95       	ret

000004c6 <LCD_voidClear>:

void LCD_voidClear(void)
{
	LCD_voidSendCommand(0b00000001);
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_voidSendCommand>
 4cc:	8f e3       	ldi	r24, 0x3F	; 63
 4ce:	9f e1       	ldi	r25, 0x1F	; 31
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <LCD_voidClear+0xa>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <LCD_voidClear+0x10>
 4d6:	00 00       	nop
 4d8:	08 95       	ret

000004da <LCD_voidGoToSpecificPosition>:
	DIO_voidSetPinValue(LCD_D5_PORT, LCD_D5_PIN, GET_BIT(copy_u8Value, 1));
	DIO_voidSetPinValue(LCD_D6_PORT, LCD_D6_PIN, GET_BIT(copy_u8Value, 2));
	DIO_voidSetPinValue(LCD_D7_PORT, LCD_D7_PIN, GET_BIT(copy_u8Value, 3));
}
void LCD_voidGoToSpecificPosition(u8 copy_u8LineNumber, u8 copy_u8Position)
{
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	18 2f       	mov	r17, r24
 4e2:	d6 2f       	mov	r29, r22
	if(copy_u8LineNumber == 0)
 4e4:	81 11       	cpse	r24, r1
 4e6:	0e c0       	rjmp	.+28     	; 0x504 <LCD_voidGoToSpecificPosition+0x2a>
	{
		LCD_voidSendCommand(0b00101011);
 4e8:	8b e2       	ldi	r24, 0x2B	; 43
 4ea:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_voidSendCommand>
		LCD_voidSendCommand(0x80 | 0x00);
 4ee:	80 e8       	ldi	r24, 0x80	; 128
 4f0:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_voidSendCommand>
		for(u8 i = 0; i < copy_u8Position; i++)
 4f4:	c0 e0       	ldi	r28, 0x00	; 0
 4f6:	04 c0       	rjmp	.+8      	; 0x500 <LCD_voidGoToSpecificPosition+0x26>
		{
			LCD_voidSendCommand(0b00010111);
 4f8:	87 e1       	ldi	r24, 0x17	; 23
 4fa:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_voidSendCommand>
{
	if(copy_u8LineNumber == 0)
	{
		LCD_voidSendCommand(0b00101011);
		LCD_voidSendCommand(0x80 | 0x00);
		for(u8 i = 0; i < copy_u8Position; i++)
 4fe:	cf 5f       	subi	r28, 0xFF	; 255
 500:	cd 17       	cp	r28, r29
 502:	d0 f3       	brcs	.-12     	; 0x4f8 <LCD_voidGoToSpecificPosition+0x1e>
		{
			LCD_voidSendCommand(0b00010111);
		}
	}
	if(copy_u8LineNumber == 1)
 504:	11 30       	cpi	r17, 0x01	; 1
 506:	71 f4       	brne	.+28     	; 0x524 <LCD_voidGoToSpecificPosition+0x4a>
	{
		LCD_voidSendCommand(0b00101011);
 508:	8b e2       	ldi	r24, 0x2B	; 43
 50a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_voidSendCommand>
		LCD_voidSendCommand(0x80 | 0x40);
 50e:	80 ec       	ldi	r24, 0xC0	; 192
 510:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_voidSendCommand>
		for(u8 i = 0; i < copy_u8Position; i++)
 514:	c0 e0       	ldi	r28, 0x00	; 0
 516:	04 c0       	rjmp	.+8      	; 0x520 <LCD_voidGoToSpecificPosition+0x46>
		{
			LCD_voidSendCommand(0b00010111);
 518:	87 e1       	ldi	r24, 0x17	; 23
 51a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_voidSendCommand>
	}
	if(copy_u8LineNumber == 1)
	{
		LCD_voidSendCommand(0b00101011);
		LCD_voidSendCommand(0x80 | 0x40);
		for(u8 i = 0; i < copy_u8Position; i++)
 51e:	cf 5f       	subi	r28, 0xFF	; 255
 520:	cd 17       	cp	r28, r29
 522:	d0 f3       	brcs	.-12     	; 0x518 <LCD_voidGoToSpecificPosition+0x3e>
		{
			LCD_voidSendCommand(0b00010111);
		}
	}
}
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	08 95       	ret

0000052c <LCD_voidShift>:
void LCD_voidShift(u8 copy_u8ShifttingDirection)
{
	switch (copy_u8ShifttingDirection)
 52c:	88 23       	and	r24, r24
 52e:	19 f0       	breq	.+6      	; 0x536 <LCD_voidShift+0xa>
 530:	81 30       	cpi	r24, 0x01	; 1
 532:	29 f0       	breq	.+10     	; 0x53e <LCD_voidShift+0x12>
 534:	08 95       	ret
	{
		case LCD_SHIFT_LEFT:
		LCD_voidSendCommand(0b00011011);
 536:	8b e1       	ldi	r24, 0x1B	; 27
 538:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_voidSendCommand>
		break;
 53c:	08 95       	ret
		case LCD_SHIFT_RIGHT:
		LCD_voidSendCommand(0b00011111);
 53e:	8f e1       	ldi	r24, 0x1F	; 31
 540:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_voidSendCommand>
 544:	08 95       	ret

00000546 <main>:
	f32 local_f32Frequency = 250;

	f32 local_f32Ton = ((local_u8Duty / 100.0)/(local_f32Frequency * 1000)) * 1000000;
	f32 local_f32PeriodicTime = (1 / (local_f32Frequency * 1000)) * 1000000;

	LCD_voidInit();
 546:	0e 94 92 01 	call	0x324	; 0x324 <LCD_voidInit>

	LCD_voidDisplayString((u8*)"Frequency:");
 54a:	80 e6       	ldi	r24, 0x60	; 96
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_voidDisplayString>
	LCD_voidDisplayNumber(local_f32Frequency);
 552:	6a ef       	ldi	r22, 0xFA	; 250
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_voidDisplayNumber>
	LCD_voidDisplayString((u8*)"KHz");
 55e:	8b e6       	ldi	r24, 0x6B	; 107
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(1,0);
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString((u8*)"Duty Cycle: ");
 56e:	8f e6       	ldi	r24, 0x6F	; 111
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_voidDisplayString>
	LCD_voidDisplayNumber(local_u8Duty);
 576:	69 e1       	ldi	r22, 0x19	; 25
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_voidDisplayNumber>
	LCD_voidDisplayChar('%');
 582:	85 e2       	ldi	r24, 0x25	; 37
 584:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidDisplayChar>
 588:	2f ef       	ldi	r18, 0xFF	; 255
 58a:	87 ea       	ldi	r24, 0xA7	; 167
 58c:	91 e6       	ldi	r25, 0x61	; 97
 58e:	21 50       	subi	r18, 0x01	; 1
 590:	80 40       	sbci	r24, 0x00	; 0
 592:	90 40       	sbci	r25, 0x00	; 0
 594:	e1 f7       	brne	.-8      	; 0x58e <main+0x48>
 596:	00 c0       	rjmp	.+0      	; 0x598 <main+0x52>
 598:	00 00       	nop

	_delay_ms(2000);
	LCD_voidClear();
 59a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LCD_voidClear>

	LCD_voidDisplayString((u8*)"ton: ");
 59e:	8c e7       	ldi	r24, 0x7C	; 124
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_voidDisplayString>
	LCD_voidDisplayNumber(local_f32Ton);
 5a6:	61 e0       	ldi	r22, 0x01	; 1
 5a8:	70 e0       	ldi	r23, 0x00	; 0
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_voidDisplayNumber>
	LCD_voidDisplayString((u8*)"us");
 5b2:	82 e8       	ldi	r24, 0x82	; 130
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_voidDisplayString>
	LCD_voidGoToSpecificPosition(1, 0);
 5ba:	60 e0       	ldi	r22, 0x00	; 0
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_voidGoToSpecificPosition>
	LCD_voidDisplayString((u8*)"toff: ");
 5c2:	85 e8       	ldi	r24, 0x85	; 133
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_voidDisplayString>
	LCD_voidDisplayNumber(local_f32PeriodicTime - local_f32Ton);
 5ca:	63 e0       	ldi	r22, 0x03	; 3
 5cc:	70 e0       	ldi	r23, 0x00	; 0
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 07 02 	call	0x40e	; 0x40e <LCD_voidDisplayNumber>
	LCD_voidDisplayString((u8*)"us");
 5d6:	82 e8       	ldi	r24, 0x82	; 130
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <LCD_voidDisplayString>
 5de:	2f ef       	ldi	r18, 0xFF	; 255
 5e0:	87 ea       	ldi	r24, 0xA7	; 167
 5e2:	91 e6       	ldi	r25, 0x61	; 97
 5e4:	21 50       	subi	r18, 0x01	; 1
 5e6:	80 40       	sbci	r24, 0x00	; 0
 5e8:	90 40       	sbci	r25, 0x00	; 0
 5ea:	e1 f7       	brne	.-8      	; 0x5e4 <main+0x9e>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <main+0xa8>
 5ee:	00 00       	nop

	_delay_ms(2000);
	LCD_voidClear();
 5f0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LCD_voidClear>

	DIO_voidSetPinDirection(DIO_PORTB, DIO_PIN3, DIO_PIN_OUTPUT);
 5f4:	41 e0       	ldi	r20, 0x01	; 1
 5f6:	63 e0       	ldi	r22, 0x03	; 3
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_voidSetPinDirection>
	PWM0_voidInit();
 5fe:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <PWM0_voidInit>
	PWM0_voidGeneratePWM(local_u8Duty);
 602:	89 e1       	ldi	r24, 0x19	; 25
 604:	0e 94 77 03 	call	0x6ee	; 0x6ee <PWM0_voidGeneratePWM>
	
	
		   
					  
		u8 lcd_width = 0;
 608:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{		
		
			static u8 counter = 0;
		
		   for(u8 i = 0; i < local_f32Ton; i++)
 60a:	c0 e0       	ldi	r28, 0x00	; 0
 60c:	09 c0       	rjmp	.+18     	; 0x620 <main+0xda>
		   {
			   LCD_voidDisplayChar('-');
 60e:	8d e2       	ldi	r24, 0x2D	; 45
 610:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidDisplayChar>
			   counter++;
 614:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
 618:	8f 5f       	subi	r24, 0xFF	; 255
 61a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
	while (1)
	{		
		
			static u8 counter = 0;
		
		   for(u8 i = 0; i < local_f32Ton; i++)
 61e:	cf 5f       	subi	r28, 0xFF	; 255
 620:	6c 2f       	mov	r22, r28
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 92 03 	call	0x724	; 0x724 <__floatsisf>
 62c:	20 e0       	ldi	r18, 0x00	; 0
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	40 e8       	ldi	r20, 0x80	; 128
 632:	5f e3       	ldi	r21, 0x3F	; 63
 634:	0e 94 8b 03 	call	0x716	; 0x716 <__cmpsf2>
 638:	88 23       	and	r24, r24
 63a:	4c f3       	brlt	.-46     	; 0x60e <main+0xc8>
		   {
			   LCD_voidDisplayChar('-');
			   counter++;
		   }
		   
		   LCD_voidDisplayChar('|');
 63c:	8c e7       	ldi	r24, 0x7C	; 124
 63e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidDisplayChar>
		   LCD_voidGoToSpecificPosition(1, counter++);
 642:	60 91 8c 00 	lds	r22, 0x008C	; 0x80008c <__data_end>
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	86 0f       	add	r24, r22
 64a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_voidGoToSpecificPosition>
		   LCD_voidDisplayChar('|');
 654:	8c e7       	ldi	r24, 0x7C	; 124
 656:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidDisplayChar>
		   for(u8 j = 0; j < (local_f32PeriodicTime - local_f32Ton); j++)
 65a:	c0 e0       	ldi	r28, 0x00	; 0
 65c:	09 c0       	rjmp	.+18     	; 0x670 <main+0x12a>
		   {
			   LCD_voidDisplayChar('-');
 65e:	8d e2       	ldi	r24, 0x2D	; 45
 660:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidDisplayChar>
			   counter++;
 664:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <__data_end>
 668:	8f 5f       	subi	r24, 0xFF	; 255
 66a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
		   }
		   
		   LCD_voidDisplayChar('|');
		   LCD_voidGoToSpecificPosition(1, counter++);
		   LCD_voidDisplayChar('|');
		   for(u8 j = 0; j < (local_f32PeriodicTime - local_f32Ton); j++)
 66e:	cf 5f       	subi	r28, 0xFF	; 255
 670:	6c 2f       	mov	r22, r28
 672:	70 e0       	ldi	r23, 0x00	; 0
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 92 03 	call	0x724	; 0x724 <__floatsisf>
 67c:	20 e0       	ldi	r18, 0x00	; 0
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	40 e4       	ldi	r20, 0x40	; 64
 682:	50 e4       	ldi	r21, 0x40	; 64
 684:	0e 94 8b 03 	call	0x716	; 0x716 <__cmpsf2>
 688:	88 23       	and	r24, r24
 68a:	4c f3       	brlt	.-46     	; 0x65e <main+0x118>
		   {
			   LCD_voidDisplayChar('-');
			   counter++;
		   }
		   LCD_voidDisplayChar('|');
 68c:	8c e7       	ldi	r24, 0x7C	; 124
 68e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidDisplayChar>
		   LCD_voidGoToSpecificPosition(0, counter++);
 692:	60 91 8c 00 	lds	r22, 0x008C	; 0x80008c <__data_end>
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	86 0f       	add	r24, r22
 69a:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__data_end>
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_voidGoToSpecificPosition>
		   LCD_voidDisplayChar('|');
 6a4:	8c e7       	ldi	r24, 0x7C	; 124
 6a6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LCD_voidDisplayChar>
 6aa:	2f ef       	ldi	r18, 0xFF	; 255
 6ac:	83 ed       	ldi	r24, 0xD3	; 211
 6ae:	90 e3       	ldi	r25, 0x30	; 48
 6b0:	21 50       	subi	r18, 0x01	; 1
 6b2:	80 40       	sbci	r24, 0x00	; 0
 6b4:	90 40       	sbci	r25, 0x00	; 0
 6b6:	e1 f7       	brne	.-8      	; 0x6b0 <main+0x16a>
 6b8:	00 c0       	rjmp	.+0      	; 0x6ba <main+0x174>
 6ba:	00 00       	nop
		   
		   

		   _delay_ms(1000);
		   lcd_width+=5;
 6bc:	db 5f       	subi	r29, 0xFB	; 251
		   if(lcd_width == 45)
 6be:	dd 32       	cpi	r29, 0x2D	; 45
 6c0:	29 f4       	brne	.+10     	; 0x6cc <main+0x186>
		   {
			   LCD_voidClear();
 6c2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <LCD_voidClear>
			   lcd_width = 0;
			   counter = 0;
 6c6:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__data_end>
		   _delay_ms(1000);
		   lcd_width+=5;
		   if(lcd_width == 45)
		   {
			   LCD_voidClear();
			   lcd_width = 0;
 6ca:	d0 e0       	ldi	r29, 0x00	; 0
			   counter = 0;
			   
		   }
		   LCD_voidShift(LCD_SHIFT_LEFT);
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	0e 94 96 02 	call	0x52c	; 0x52c <LCD_voidShift>
		   
		   
		   
		   
	}
 6d2:	9b cf       	rjmp	.-202    	; 0x60a <main+0xc4>

000006d4 <PWM0_voidInit>:
#include "PWM0_Interface.h"
#include "PWM0_Register.h"

void PWM0_voidInit(void)
{
	SET_BIT(TCCR0_REG, WGM00);
 6d4:	83 b7       	in	r24, 0x33	; 51
 6d6:	80 64       	ori	r24, 0x40	; 64
 6d8:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0_REG, WGM01);
 6da:	83 b7       	in	r24, 0x33	; 51
 6dc:	88 60       	ori	r24, 0x08	; 8
 6de:	83 bf       	out	0x33, r24	; 51
	
	CLR_BIT(TCCR0_REG, COM00);
 6e0:	83 b7       	in	r24, 0x33	; 51
 6e2:	8f 7e       	andi	r24, 0xEF	; 239
 6e4:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0_REG, COM01);
 6e6:	83 b7       	in	r24, 0x33	; 51
 6e8:	80 62       	ori	r24, 0x20	; 32
 6ea:	83 bf       	out	0x33, r24	; 51
 6ec:	08 95       	ret

000006ee <PWM0_voidGeneratePWM>:
}
void PWM0_voidGeneratePWM(u8 copy_u8DutyCycle)
{
	if (copy_u8DutyCycle <= 100)
 6ee:	85 36       	cpi	r24, 0x65	; 101
 6f0:	88 f4       	brcc	.+34     	; 0x714 <PWM0_voidGeneratePWM+0x26>
	{
		OCR0_REG = ((copy_u8DutyCycle * 256) / 100) - 1;
 6f2:	98 2f       	mov	r25, r24
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	64 e6       	ldi	r22, 0x64	; 100
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <__divmodhi4>
 6fe:	61 50       	subi	r22, 0x01	; 1
 700:	6c bf       	out	0x3c, r22	; 60
		
		
		SET_BIT(TCCR0_REG, CS00);
 702:	83 b7       	in	r24, 0x33	; 51
 704:	81 60       	ori	r24, 0x01	; 1
 706:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0_REG, CS01);
 708:	83 b7       	in	r24, 0x33	; 51
 70a:	82 60       	ori	r24, 0x02	; 2
 70c:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0_REG, CS02);
 70e:	83 b7       	in	r24, 0x33	; 51
 710:	8b 7f       	andi	r24, 0xFB	; 251
 712:	83 bf       	out	0x33, r24	; 51
 714:	08 95       	ret

00000716 <__cmpsf2>:
 716:	0e 94 cd 03 	call	0x79a	; 0x79a <__fp_cmp>
 71a:	08 f4       	brcc	.+2      	; 0x71e <__cmpsf2+0x8>
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	08 95       	ret

00000720 <__floatunsisf>:
 720:	e8 94       	clt
 722:	09 c0       	rjmp	.+18     	; 0x736 <__floatsisf+0x12>

00000724 <__floatsisf>:
 724:	97 fb       	bst	r25, 7
 726:	3e f4       	brtc	.+14     	; 0x736 <__floatsisf+0x12>
 728:	90 95       	com	r25
 72a:	80 95       	com	r24
 72c:	70 95       	com	r23
 72e:	61 95       	neg	r22
 730:	7f 4f       	sbci	r23, 0xFF	; 255
 732:	8f 4f       	sbci	r24, 0xFF	; 255
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	99 23       	and	r25, r25
 738:	a9 f0       	breq	.+42     	; 0x764 <__floatsisf+0x40>
 73a:	f9 2f       	mov	r31, r25
 73c:	96 e9       	ldi	r25, 0x96	; 150
 73e:	bb 27       	eor	r27, r27
 740:	93 95       	inc	r25
 742:	f6 95       	lsr	r31
 744:	87 95       	ror	r24
 746:	77 95       	ror	r23
 748:	67 95       	ror	r22
 74a:	b7 95       	ror	r27
 74c:	f1 11       	cpse	r31, r1
 74e:	f8 cf       	rjmp	.-16     	; 0x740 <__floatsisf+0x1c>
 750:	fa f4       	brpl	.+62     	; 0x790 <__floatsisf+0x6c>
 752:	bb 0f       	add	r27, r27
 754:	11 f4       	brne	.+4      	; 0x75a <__floatsisf+0x36>
 756:	60 ff       	sbrs	r22, 0
 758:	1b c0       	rjmp	.+54     	; 0x790 <__floatsisf+0x6c>
 75a:	6f 5f       	subi	r22, 0xFF	; 255
 75c:	7f 4f       	sbci	r23, 0xFF	; 255
 75e:	8f 4f       	sbci	r24, 0xFF	; 255
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	16 c0       	rjmp	.+44     	; 0x790 <__floatsisf+0x6c>
 764:	88 23       	and	r24, r24
 766:	11 f0       	breq	.+4      	; 0x76c <__floatsisf+0x48>
 768:	96 e9       	ldi	r25, 0x96	; 150
 76a:	11 c0       	rjmp	.+34     	; 0x78e <__floatsisf+0x6a>
 76c:	77 23       	and	r23, r23
 76e:	21 f0       	breq	.+8      	; 0x778 <__floatsisf+0x54>
 770:	9e e8       	ldi	r25, 0x8E	; 142
 772:	87 2f       	mov	r24, r23
 774:	76 2f       	mov	r23, r22
 776:	05 c0       	rjmp	.+10     	; 0x782 <__floatsisf+0x5e>
 778:	66 23       	and	r22, r22
 77a:	71 f0       	breq	.+28     	; 0x798 <__floatsisf+0x74>
 77c:	96 e8       	ldi	r25, 0x86	; 134
 77e:	86 2f       	mov	r24, r22
 780:	70 e0       	ldi	r23, 0x00	; 0
 782:	60 e0       	ldi	r22, 0x00	; 0
 784:	2a f0       	brmi	.+10     	; 0x790 <__floatsisf+0x6c>
 786:	9a 95       	dec	r25
 788:	66 0f       	add	r22, r22
 78a:	77 1f       	adc	r23, r23
 78c:	88 1f       	adc	r24, r24
 78e:	da f7       	brpl	.-10     	; 0x786 <__floatsisf+0x62>
 790:	88 0f       	add	r24, r24
 792:	96 95       	lsr	r25
 794:	87 95       	ror	r24
 796:	97 f9       	bld	r25, 7
 798:	08 95       	ret

0000079a <__fp_cmp>:
 79a:	99 0f       	add	r25, r25
 79c:	00 08       	sbc	r0, r0
 79e:	55 0f       	add	r21, r21
 7a0:	aa 0b       	sbc	r26, r26
 7a2:	e0 e8       	ldi	r30, 0x80	; 128
 7a4:	fe ef       	ldi	r31, 0xFE	; 254
 7a6:	16 16       	cp	r1, r22
 7a8:	17 06       	cpc	r1, r23
 7aa:	e8 07       	cpc	r30, r24
 7ac:	f9 07       	cpc	r31, r25
 7ae:	c0 f0       	brcs	.+48     	; 0x7e0 <__fp_cmp+0x46>
 7b0:	12 16       	cp	r1, r18
 7b2:	13 06       	cpc	r1, r19
 7b4:	e4 07       	cpc	r30, r20
 7b6:	f5 07       	cpc	r31, r21
 7b8:	98 f0       	brcs	.+38     	; 0x7e0 <__fp_cmp+0x46>
 7ba:	62 1b       	sub	r22, r18
 7bc:	73 0b       	sbc	r23, r19
 7be:	84 0b       	sbc	r24, r20
 7c0:	95 0b       	sbc	r25, r21
 7c2:	39 f4       	brne	.+14     	; 0x7d2 <__fp_cmp+0x38>
 7c4:	0a 26       	eor	r0, r26
 7c6:	61 f0       	breq	.+24     	; 0x7e0 <__fp_cmp+0x46>
 7c8:	23 2b       	or	r18, r19
 7ca:	24 2b       	or	r18, r20
 7cc:	25 2b       	or	r18, r21
 7ce:	21 f4       	brne	.+8      	; 0x7d8 <__fp_cmp+0x3e>
 7d0:	08 95       	ret
 7d2:	0a 26       	eor	r0, r26
 7d4:	09 f4       	brne	.+2      	; 0x7d8 <__fp_cmp+0x3e>
 7d6:	a1 40       	sbci	r26, 0x01	; 1
 7d8:	a6 95       	lsr	r26
 7da:	8f ef       	ldi	r24, 0xFF	; 255
 7dc:	81 1d       	adc	r24, r1
 7de:	81 1d       	adc	r24, r1
 7e0:	08 95       	ret

000007e2 <__divmodhi4>:
 7e2:	97 fb       	bst	r25, 7
 7e4:	07 2e       	mov	r0, r23
 7e6:	16 f4       	brtc	.+4      	; 0x7ec <__divmodhi4+0xa>
 7e8:	00 94       	com	r0
 7ea:	07 d0       	rcall	.+14     	; 0x7fa <__divmodhi4_neg1>
 7ec:	77 fd       	sbrc	r23, 7
 7ee:	09 d0       	rcall	.+18     	; 0x802 <__divmodhi4_neg2>
 7f0:	0e 94 27 04 	call	0x84e	; 0x84e <__udivmodhi4>
 7f4:	07 fc       	sbrc	r0, 7
 7f6:	05 d0       	rcall	.+10     	; 0x802 <__divmodhi4_neg2>
 7f8:	3e f4       	brtc	.+14     	; 0x808 <__divmodhi4_exit>

000007fa <__divmodhi4_neg1>:
 7fa:	90 95       	com	r25
 7fc:	81 95       	neg	r24
 7fe:	9f 4f       	sbci	r25, 0xFF	; 255
 800:	08 95       	ret

00000802 <__divmodhi4_neg2>:
 802:	70 95       	com	r23
 804:	61 95       	neg	r22
 806:	7f 4f       	sbci	r23, 0xFF	; 255

00000808 <__divmodhi4_exit>:
 808:	08 95       	ret

0000080a <__udivmodsi4>:
 80a:	a1 e2       	ldi	r26, 0x21	; 33
 80c:	1a 2e       	mov	r1, r26
 80e:	aa 1b       	sub	r26, r26
 810:	bb 1b       	sub	r27, r27
 812:	fd 01       	movw	r30, r26
 814:	0d c0       	rjmp	.+26     	; 0x830 <__udivmodsi4_ep>

00000816 <__udivmodsi4_loop>:
 816:	aa 1f       	adc	r26, r26
 818:	bb 1f       	adc	r27, r27
 81a:	ee 1f       	adc	r30, r30
 81c:	ff 1f       	adc	r31, r31
 81e:	a2 17       	cp	r26, r18
 820:	b3 07       	cpc	r27, r19
 822:	e4 07       	cpc	r30, r20
 824:	f5 07       	cpc	r31, r21
 826:	20 f0       	brcs	.+8      	; 0x830 <__udivmodsi4_ep>
 828:	a2 1b       	sub	r26, r18
 82a:	b3 0b       	sbc	r27, r19
 82c:	e4 0b       	sbc	r30, r20
 82e:	f5 0b       	sbc	r31, r21

00000830 <__udivmodsi4_ep>:
 830:	66 1f       	adc	r22, r22
 832:	77 1f       	adc	r23, r23
 834:	88 1f       	adc	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	1a 94       	dec	r1
 83a:	69 f7       	brne	.-38     	; 0x816 <__udivmodsi4_loop>
 83c:	60 95       	com	r22
 83e:	70 95       	com	r23
 840:	80 95       	com	r24
 842:	90 95       	com	r25
 844:	9b 01       	movw	r18, r22
 846:	ac 01       	movw	r20, r24
 848:	bd 01       	movw	r22, r26
 84a:	cf 01       	movw	r24, r30
 84c:	08 95       	ret

0000084e <__udivmodhi4>:
 84e:	aa 1b       	sub	r26, r26
 850:	bb 1b       	sub	r27, r27
 852:	51 e1       	ldi	r21, 0x11	; 17
 854:	07 c0       	rjmp	.+14     	; 0x864 <__udivmodhi4_ep>

00000856 <__udivmodhi4_loop>:
 856:	aa 1f       	adc	r26, r26
 858:	bb 1f       	adc	r27, r27
 85a:	a6 17       	cp	r26, r22
 85c:	b7 07       	cpc	r27, r23
 85e:	10 f0       	brcs	.+4      	; 0x864 <__udivmodhi4_ep>
 860:	a6 1b       	sub	r26, r22
 862:	b7 0b       	sbc	r27, r23

00000864 <__udivmodhi4_ep>:
 864:	88 1f       	adc	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	5a 95       	dec	r21
 86a:	a9 f7       	brne	.-22     	; 0x856 <__udivmodhi4_loop>
 86c:	80 95       	com	r24
 86e:	90 95       	com	r25
 870:	bc 01       	movw	r22, r24
 872:	cd 01       	movw	r24, r26
 874:	08 95       	ret

00000876 <_exit>:
 876:	f8 94       	cli

00000878 <__stop_program>:
 878:	ff cf       	rjmp	.-2      	; 0x878 <__stop_program>
